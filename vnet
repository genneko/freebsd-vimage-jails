#!/bin/sh
#
#-
# Copyright (c) 2018 genneko
# All rights reserved.
#
# This script is based on the jng utility in the FreeBSD source tree
# (in share/examples/jails).
#
# Original notice follows.
# 
#-
# Copyright (c) 2016 Devin Teske
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# $FreeBSD: releng/11.2/share/examples/jails/jng 295587 2016-02-13 00:28:48Z dteske $
#
############################################################ IDENT(1)
#
# $Title: netgraph(4) management script for vnet jails $
#
############################################################ INFORMATION
#
# Use this tool with jail.conf(5) (or rc.conf(5) ``legacy'' configuration) to
# manage `vnet' interfaces for jails. Designed to automate the creation of vnet
# interface(s) during jail `prestart' and destroy said interface(s) during jail
# `poststop'.
#
# In jail.conf(5) format:
#
# ### BEGIN EXCERPT ###
#
# xxx {
# 	host.hostname = "xxx.yyy";
# 	path = "/vm/xxx";
# 
# 	#
# 	# NB: Below 2-lines required
# 	# NB: The number of ngN_xxx interfaces should match the number of
# 	#     arguments given to `jng bridge xxx' in exec.prestart value.
# 	#
# 	vnet;
# 	vnet.interface = "ng0_xxx ng1_xxx ...";
# 
# 	exec.clean;
# 	exec.system_user = "root";
# 	exec.jail_user = "root";
# 
# 	#
# 	# NB: Below 2-lines required
# 	# NB: The number of arguments after `jng bridge xxx' should match
# 	#     the number of ngN_xxx arguments in vnet.interface value.
# 	#
# 	exec.prestart += "jng bridge xxx em0 em1 ...";
# 	exec.poststop += "jng shutdown xxx";
# 
# 	# Standard recipe
# 	exec.start += "/bin/sh /etc/rc";
# 	exec.stop = "/bin/sh /etc/rc.shutdown";
# 	exec.consolelog = "/var/log/jail_xxx_console.log";
# 	mount.devfs;
#
# 	# Optional (default off)
# 	#allow.mount;
# 	#allow.set_hostname = 1;
# 	#allow.sysvipc = 1;
# 	#devfs_ruleset = "11"; # rule to unhide bpf for DHCP
# }
#
# ### END EXCERPT ###
#
# In rc.conf(5) ``legacy'' format (used when /etc/jail.conf does not exist):
#
# ### BEGIN EXCERPT ###
#
# jail_enable="YES"
# jail_list="xxx"
#
# #
# # Global presets for all jails
# #
# jail_devfs_enable="YES"	# mount devfs
#
# #
# # Global options (default off)
# #
# #jail_mount_enable="YES"		# mount /etc/fstab.{name}
# #jail_set_hostname_allow="YES"	# Allow hostname to change
# #jail_sysvipc_allow="YES"		# Allow SysV Interprocess Comm.
# 
# # xxx
# jail_xxx_hostname="xxx.shxd.cx"		# hostname
# jail_xxx_rootdir="/vm/xxx"			# root directory
# jail_xxx_vnet_interfaces="ng0_xxx ng1xxx ..."	# vnet interface(s)
# jail_xxx_exec_prestart0="jng bridge xxx em0 em1 ..."	# bridge interface(s)
# jail_xxx_exec_poststop0="jng shutdown xxx"	# destroy interface(s)
# #jail_xxx_mount_enable="YES"			# mount /etc/fstab.xxx
# #jail_xxx_devfs_ruleset="11"			# rule to unhide bpf for DHCP
#
# ### END EXCERPT ###
#
# Note that the legacy rc.conf(5) format is converted to
# /var/run/jail.{name}.conf by /etc/rc.d/jail if jail.conf(5) is missing.
#
# ASIDE: dhclient(8) inside a vnet jail...
#
# To allow dhclient(8) to work inside a vnet jail, make sure the following
# appears in /etc/devfs.rules (which should be created if it doesn't exist):
#
# 	[devfsrules_jail=11]
# 	add include $devfsrules_hide_all
# 	add include $devfsrules_unhide_basic
# 	add include $devfsrules_unhide_login
# 	add path 'bpf*' unhide
#
# And set ether devfs.ruleset="11" (jail.conf(5)) or
# jail_{name}_devfs_ruleset="11" (rc.conf(5)).
#
# NB: While this tool can't create every type of desirable topology, it should
# handle most setups, minus some which considered exotic or purpose-built.
#
############################################################ GLOBALS

pgm="${0##*/}" # Program basename

#
# Global exit status
#
SUCCESS=0
FAILURE=1

############################################################ FUNCTIONS

usage()
{
	local action usage descr
	exec >&2
	echo "Usage: $pgm action [arguments]"
	echo "Actions:"
	for action in \
		add		\
		delete		\
		eiface		\
		list		\
		list_jail	\
		graph		\
		stats		\
		table		\
	; do
		eval usage=\"\$vnet_${action}_usage\"
		[ "$usage" ] || continue
		eval descr=\"\$vnet_${action}_descr\"
		printf "\t%s\n\t\t%s\n" "$usage" "$descr"
	done
	exit $FAILURE
}

action_usage()
{
	local usage descr action="$1"
	eval usage=\"\$vnet_${action}_usage\"
	echo "Usage: $pgm $usage" >&2
	eval descr=\"\$vnet_${action}_descr\"
	printf "\t%s\n" "$descr"
	exit $FAILURE
}

derive_mac()
{
	local OPTIND=1 OPTARG __flag
	local __mac_num= __make_pair=
	while getopts 2n: __flag; do
		case "$__flag" in
		2) __make_pair=1 ;;
		n) __mac_num=${OPTARG%%[^0-9]*} ;;
		esac
	done
	shift $(( $OPTIND - 1 ))

	if [ ! "$__mac_num" ]; then
		eval __mac_num=\${_${iface}_num:--1}
		__mac_num=$(( $__mac_num + 1 ))
		eval _${iface}_num=\$__mac_num
	fi

	local __iface="$1" __name="$2" __var_to_set="$3" __var_to_set_b="$4"
	local __iface_devid __new_devid __num __new_devid_b
	#
	# Calculate MAC address derived from given iface.
	#
	# The formula I'm using is ``NP:SS:SS:II:II:II'' where:
	# + N denotes 4 bits used as a counter to support branching
	#   each parent interface up to 15 times under the same jail
	#   name (see S below).
	# + P denotes the special nibble whose value, if one of
	#   2, 6, A, or E (but usually 2) denotes a privately
	#   administered MAC address (while remaining routable).
	# + S denotes 16 bits, the sum(1) value of the jail name.
	# + I denotes bits that are inherited from parent interface.
	#
	# The S bits are a CRC-16 checksum of NAME, allowing the jail
	# to change link numbers in ng_bridge(4) without affecting the
	# MAC address. Meanwhile, if...
	#   + the jail NAME changes (e.g., it was duplicated and given
	#     a new name with no other changes)
	#   + the underlying network interface changes
	#   + the jail is moved to another host
	# the MAC address will be recalculated to a new, similarly
	# unique value preventing conflict.
	#
	__iface_devid=$( ifconfig $__iface ether | awk '/ether/,$0=$2' )
	# ??:??:??:II:II:II
	__new_devid=${__iface_devid#??:??:??} # => :II:II:II
	# => :SS:SS:II:II:II
	__num=$( set -- `echo -n "$__name" | sum` && echo $1 )
	__new_devid=$( printf :%02x:%02x \
		$(( $__num >> 8 & 255 )) $(( $__num & 255 )) )$__new_devid
	# => P:SS:SS:II:II:II
	case "$__iface_devid" in
	   ?2:*) __new_devid=a$__new_devid __new_devid_b=e$__new_devid ;;
	?[Ee]:*) __new_devid=2$__new_devid __new_devid_b=6$__new_devid ;;
	      *) __new_devid=2$__new_devid __new_devid_b=e$__new_devid
	esac
	# => NP:SS:SS:II:II:II
	__new_devid=$( printf %x $(( $__mac_num & 15 )) )$__new_devid
	__new_devid_b=$( printf %x $(( $__mac_num & 15 )) )$__new_devid_b

	#
	# Return derivative MAC address(es)
	#
	if [ "$__make_pair" ]; then
		if [ "$__var_to_set" -a "$__var_to_set_b" ]; then
			eval $__var_to_set=\$__new_devid
			eval $__var_to_set_b=\$__new_devid_b
		else
			echo $__new_devid $__new_devid_b
		fi
	else
		if [ "$__var_to_set" ]; then
			eval $__var_to_set=\$__new_devid
		else
			echo $__new_devid
		fi
	fi
}

mustberoot_to_continue()
{
	if [ "$( id -u )" -ne 0 ]; then
		echo "Must run as root!" >&2
		exit $FAILURE
	fi
}

is_ether_being_used()
{
	local iface="$1"
	[ "$iface" ] &&
		ngctl show \
		$(ngctl show "$iface:" 2>/dev/null |
			awk '$1 == "upper"{print $2}'): 2>/dev/null |
		awk '/Num hooks:/{ print $9 }' |
		awk '$1 > 2{ ok=1 } END{ exit !ok }'
}

is_eiface_being_used()
{
	local iface="$1"
	[ "$iface" ] &&
		ngctl show \
		$(ngctl show "$iface:" 2>/dev/null |
			awk '$1 == "ether"{print $2}'): 2>/dev/null |
		awk '/Num hooks:/{ print $9 }' |
		awk '$1 > 1{ ok=1 } END{ exit !ok }'
}

vnet_eiface_usage="eiface [-dD] [-4 ip4] [-6 ip6] iface"
vnet_eiface_descr="Create/destroy virtual interface (eiface) iface"
vnet_eiface()
{
	local OPTIND=1 OPTARG ip4 ip6 destroy force
	while getopts 'dD4:6:' flag; do
		case "$flag" in
		d) destroy=1 ;;
		D) destroy=1; force=1 ;;
		4) ip4="$OPTARG"
		   [ "$ip4" ] || action_usage eiface ;; # NOTREACHED
		6) ip6="$OPTARG"
		   [ "$ip6" ] || action_usage eiface ;; # NOTREACHED
		*) action_usage eiface # NOTREACHED
		esac
	done
	shift $(( $OPTIND - 1 ))

	local iface="$1"
	[ "${iface:-x}" = "${iface#*[!0-9a-zA-Z_]}" ] ||
		action_usage eiface # NOTREACHED

	mustberoot_to_continue

	if [ "$destroy" ]; then
		local iftype=$(get_nodetype $iface)
		if [ "$iftype" == "eiface" ] &&
			ngctl msg "$iface:" getifname > /dev/null 2>&1; then
			if ! is_eiface_being_used "$iface" || [ "$force" ]; then
				ngctl shut "$iface:"
			fi
		fi
		return
	fi

	if ! ngctl msg "$iface:" getifname > /dev/null 2>&1; then
		local eiface i=0 ri=255
		ngctl mkpeer eiface ether ether
		eiface=$(ngctl list | sort -k 6 | grep ngeth | tail -n 1 | awk '{print $2}')
		i=${eiface##*[!0-9]}
		ri=$(( $ri - $i ))
		ifconfig "$eiface" ether $(printf "02:00:%02x:%02x:%02x:%02x" $ri $i $ri $i)
		ifconfig "$eiface" up

		ngctl name "$eiface:" "$iface"
		ifconfig "$eiface" name "$iface"
	fi

	if [ "$ip4" ]; then
		if ! ifconfig "$iface" | grep -q "${ip4%%[!0-9.]*}"; then
			ifconfig "$iface" inet $ip4
		fi
	fi

	if [ "$ip6" ]; then
		if ! ifconfig "$iface" | grep -q "${ip6%%[!0-9a-f:]*}"; then
			ifconfig "$iface" inet6 $ip6
		fi
	fi
}

# Returns the node type of a specified netgraph node.
get_nodetype()
{
	ngctl show "$1:" 2> /dev/null |
			awk '$1 == "Name:" && $3 == "Type:" { print $4 }'
}

get_nextlink()
{
	local bridge="$1"
	local num=${2:-0}
	if ngctl info $bridge: > /dev/null 2>&1; then
		while ngctl msg $bridge: getstats $num > /dev/null 2>&1
		do
			num=$(( $num + 1 ))
		done
	else
		num=-1
	fi
	echo $num
}

is_member()
{
	local bridge="$1"
	local interface="$2"
	[ "$bridge" -a "$interface" ] &&
		ngctl show $bridge: 2> /dev/null |
			awk '$1 ~ /link/ { print $2 }' |
			grep -qw $interface
}

get_vif_jail_addr(){
	local jail addr4 addr6
	local interface="$1"
	if [ "$interface" ]; then
		jail=$(vnet_list_jail -l | grep -w $interface | cut -f1 -d:)
		if [ "$jail" ]; then
			addr4=$(jexec $jail ifconfig -f inet:cidr $interface | fgrep "inet " | cut -f3 -w | tr '\n' ',' | sed 's/,$//')
			addr6=$(jexec $jail ifconfig -f inet6:cidr $interface | fgrep "inet6 " | cut -f3 -w | tr '\n' ',' | sed 's/,$//')
		else
			addr4=$(ifconfig -f inet:cidr $interface | fgrep "inet " | cut -f3 -w | tr '\n' ',' | sed 's/,$//')
			addr6=$(ifconfig -f inet6:cidr $interface | fgrep "inet6 " | cut -f3 -w | tr '\n' ',' | sed 's/,$//')
		fi
		echo "$jail $addr4 $addr6"
	else
		echo
	fi
}

vnet_list_jail_usage="list_jail [-l]"
vnet_list_jail_descr="List VNET jails (and their interfaces)."
vnet_list_jail()
{
	local OPTIND=1 OPTARG long=0
	while getopts 'l' flag; do
		case "$flag" in
		l) long=1 ;;
		*) action_usage list_jail
		esac
	done
	shift $(( $OPTIND - 1 ))

	mustberoot_to_continue

	for jail in $(jls -s vnet name | fgrep vnet=1 | sed 's/.*name=//'); do
		echo -n "$jail"
		if [ "$long" -eq 1 ]; then
			echo -n ": $(jexec $jail ifconfig -l)"
		fi
		echo
	done
}

vnet_list_usage="list [-lr] [NETWORK_NAME]"
vnet_list_descr="Lists various objects in VNET world.
		vnet list [-l] - lists networks
		vnet list [-l] NETWORK_NAME - lists interfaces in the network
		vnet list -r [-l] [NETWORK_NAME] - recursively lists networks,
					jails, interfaces and addresses"
vnet_list()
{
	local OPTIND=1 OPTARG long=0 recursive=0 vnet vif buf jail addrs addr4 addr6
	while getopts 'lr' flag; do
		case "$flag" in
		l) long=1 ;;
		r) recursive=1 ;;
		*) action_usage list
		esac
	done
	shift $(( $OPTIND - 1 ))

	local network="$1"
	shift 1 # network

	mustberoot_to_continue

	if [ "$network" ]; then
		if [ "$recursive" -eq 1 ]; then
			echo $network
			for vif in $(vnet_list $network); do
				buf=$(get_vif_jail_addr $vif)
				jail=${buf%% *}
				addrs=${buf#* }
				addr4=${addrs%% *}
				addr6=${addrs##* }
				if [ "$long" -eq 1 ]; then
					echo "  ${jail:-$(hostname -s)(HOST)}"
					echo "    $vif"
					[ "$addr4" ] && echo "      $addr4" | sed 's/,/, /g'
					[ "$addr6" ] && echo "      $addr6" | sed 's/,/, /g'
				else
					echo -n "  ${jail:-$(hostname -s)(HOST)}"
					echo -n " $vif"
					[ "$addr4" ] && echo -n " $addr4" | sed 's/,/, /g'
					[ "$addr6" ] && echo -n " $addr6" | sed 's/,/, /g'
					echo
				fi
			done
		elif [ "$long" -eq 1 ]; then
			ngctl show "${network}br:" 2>/dev/null
		else
			ngctl show "${network}br:" 2>/dev/null | awk '$1 ~ /link/ { print $2 }' | sort | uniq
		fi
	else
		if [ "$recursive" -eq 1 ]; then
			for vnet in $(vnet_list); do
				if [ "$long" -eq 1 ]; then
					vnet_list -rl $vnet
				else
					vnet_list -r $vnet
				fi
			done
		elif [ "$long" -eq 1 ]; then
			ngctl list 2>/dev/null | awk '$4 == "bridge" { print $0 }' | sort
		else
			ngctl list 2>/dev/null | awk '$4 == "bridge" { sub(/br$/, "", $2); print $2 }' | sort
		fi
	fi
}

vnet_delete_usage="delete NETWORK_NAME [iface0 ...]"
vnet_delete_descr="Delete iface0 ... and/or NETWORK_NAME"
vnet_delete()
{
	local network="$1"
	[ "${network:-x}" = "${network#*[!0-9a-zA-Z_]}" ] ||
		action_usage delete # NOTREACHED
	shift 1 # network

	mustberoot_to_continue

	local bridge=${network}br

	local iface iftype
	for iface in $*; do
		iftype=$(get_nodetype $iface)
		if [ "$iftype" == "eiface" ]; then
			if is_member $bridge $iface; then
				vnet_eiface -D $iface
			fi
		fi
	done # for iface

	local hostiftype=$(get_nodetype $network)
	if [ "$hostiftype" == "eiface" ]; then
		vnet_eiface -d $network
	elif [ "$hostiftype" == "ether" ]; then
		if ! is_ether_being_used $network; then
			ngctl rmhook $network: lower || return
			ngctl rmhook $network: upper || return
		fi
	fi
}

vnet_add_usage="add [-b] [-4 ip4] [-6 ip6] NETWORK_NAME [iface0 ...]"
vnet_add_descr="Create and/or add iface0 ... to the network.
		The network will be also created if it doesn't exist.
		Note that 'network' here means a ng_bridge which is named
		'{NETWORK_NAME}br'.
		An interface for the host is also created with the name
		'{NETWORK_NAME}' unless -b option is specified.
		IPv4/IPv6 address can be assigned to the host interface
		using -4 and -6 options."
vnet_add()
{
	local OPTIND=1 OPTARG bronly=0 ip4 ip6 hostif opts=
	while getopts 'b4:6:' flag; do
		case "$flag" in
		b) bronly=1 ;;
		4) opts="${opts}-4 $OPTARG " ;;
		6) opts="${opts}-6 $OPTARG " ;;
		*) action_usage add # NOTREACHED
		esac
	done
	shift $(( $OPTIND - 1 ))

	local network="$1"
	[ "${network:-x}" = "${network#*[!0-9a-zA-Z_]}" ] ||
		action_usage add # NOTREACHED
	shift 1 # network

	mustberoot_to_continue

	if [ $bronly == 0 ]; then
		local hostiftype=$(get_nodetype $network)
		if [ ! "$hostiftype" -o "$hostiftype" == "eiface" ]; then
			vnet_eiface $opts $network || return
		elif [ "$hostiftype" != "ether" ]; then
			echo "NETWORK_NAME must be a host interface of type ether or eiface." >&2
			exit $FAILURE
		fi
		hostif="$network"
	fi
	local bridge=${network}br

	local iface iftype num
	for iface in $hostif $*; do
		if [ "${iface}" = "" ]; then
			continue
		fi

		# Create a virtual interface
		iftype=$(get_nodetype $iface)
		if [ ! "$iftype" ]; then
			vnet_eiface "$iface"
			iftype=$(get_nodetype $iface)
		fi

		# Bring the interface up
		ifconfig $iface up || return

		local ether
		if [ "$iftype" == "ether" ]; then
			ether=1
		elif [ "$iftype" == "eiface" ]; then
			ether=
		else
			echo "ifaceX must be a interface of type ether or eiface." >&2
			exit $FAILURE
		fi

		# Set promiscuous mode and don't overwrite src addr
		if [ "$ether" ]; then
			ngctl msg $iface: setpromisc 1 || return
			ngctl msg $iface: setautosrc 0 || return
		fi

		# If the network bridge exists, just connect the interface.
		if ngctl info $bridge: > /dev/null 2>&1; then
			if ! is_member $bridge $iface; then
				num=$(get_nextlink $bridge)
				if [ "$ether" ]; then
					ngctl connect $bridge: $iface: link$num lower || return
					num=$(( $num + 1 ))
					num=$(get_nextlink $bridge $num)
					ngctl connect $bridge: $iface: link$num upper || return
				else
					ngctl connect $bridge: $iface: link$num ether || return
				fi
			fi
		else
		# If the network bridge doesn't exist, first create it.
			if [ "$ether" ]; then
				ngctl mkpeer $iface: bridge lower link0 || return
				ngctl connect $iface: $iface:lower upper link1 || return
				ngctl name $iface:lower $bridge || return
			else
				ngctl mkpeer $iface: bridge ether link0 || return
				ngctl name $iface:ether $bridge || return
			fi
		fi
	done # for iface
}

vnet_graph_usage="graph [-f] [-T type] [-o output]"
vnet_graph_descr="Generate network graph (default output is \`jng.svg')"
vnet_graph()
{
	local OPTIND=1 OPTARG flag
	local output=jng.svg output_type= force=
	while getopts fo:T: flag; do
		case "$flag" in
		f) force=1 ;;
		o) output="$OPTARG" ;;
		T) output_type="$OPTARG" ;;
		*) action_usage graph # NOTREACHED
		esac
	done
	shift $(( $OPTIND - 1 ))
	[ $# -eq 0 -a "$output" ] || action_usage graph # NOTREACHED
	mustberoot_to_continue
	if [ -e "$output" -a ! "$force" ]; then
		echo "$output: Already exists (use \`-f' to overwrite)" >&2
		return $FAILURE
	fi
	if [ ! "$output_type" ]; then
		local valid suffix
		valid=$( dot -Txxx 2>&1 )
		for suffix in ${valid##*:}; do
			[ "$output" != "${output%.$suffix}" ] || continue
			output_type=$suffix
			break
		done
	fi
	ngctl dot | dot ${output_type:+-T "$output_type"} -o "$output"
}

vnet_stats_usage="stats NETWORK_NAME"
vnet_stats_descr="Show ng_bridge link statistics for NETWORK_NAME interfaces"
vnet_stats()
{
	local OPTIND=1 OPTARG flag
	while getopts "" flag; do
		case "$flag" in
		*) action_usage stats # NOTREACHED
		esac
	done
	shift $(( $OPTIND -1 ))
	local iface="$1"
	[ "${iface:-x}" = "${iface#*[!0-9a-zA-Z_]}" -a $# -eq 1 ] ||
		action_usage stats # NOTREACHED
	mustberoot_to_continue
	for eiface in $( vnet_list "$iface" ); do
		echo "$eiface:"
		ngctl show $eiface: | awk '
		$3 == "bridge" && $5 ~ /^link/ {
			bridge = $2
			link = substr($5, 5)
			system(sprintf("ngctl msg %s: getstats %u",
				bridge, link))
		}' | fmt 2 | awk '
			/=/ && fl = index($0, "=") {
				printf "%20s = %s\n",
					substr($0, 0, fl-1),
					substr($0, 0, fl+1)
			}
		' # END-QUOTE
	done
}

vnet_table_usage="table NETWORK_NAME"
vnet_table_descr="Show ng_bridge forwarding table for NETWORK_NAME."
vnet_table()
{
	local network="$1"
	[ "${network:-x}" = "${network#*[!0-9a-zA-Z_]}" ] ||
		action_usage table # NOTREACHED
	shift 1 # network

	mustberoot_to_continue

	local bridge=${network}br

	ngctl msg $bridge: gettable | tr '{' '\n' | awk '
	$1 ~ /numHosts=/{
		print $1;
		printf("%17s  %4s  %4s  %4s\n", "Address", "Link", "Age", "Stale");
	}
	$1 ~ /addr=/{
		if(! /linkNum=/){
			$4 = $3; $3 = $2; $2 = "linkNum=0";
		}
		gsub(/addr=/, "");
		gsub(/linkNum=/, "");
		gsub(/age=/, "");
		gsub(/staleness=/, "");
		printf("%17s  %4d  %4d  %4d\n", $1, $2, $3, $4);
	}
	' # END-QUOTE
}

############################################################ MAIN

#
# Command-line arguments
#
action="$1"
[ "$action" ] || usage # NOTREACHED

#
# Validate action argument
#
if [ "$BASH_VERSION" ]; then
	type="$( type -t "vnet_$action" )" || usage # NOTREACHED
else
	type="$( type "vnet_$action" 2> /dev/null )" || usage # NOTREACHED
fi
case "$type" in
*function)
	shift 1 # action
	eval "vnet_$action" \"\$@\"
	;;
*) usage # NOTREACHED
esac

################################################################################
# END
################################################################################
